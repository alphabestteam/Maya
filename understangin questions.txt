Understanding Questions:1. A block level element starts with a new line with a space around the element.It also uses a full line, from left to right it makes sure it fills a whole line. For example; <div>, <p> elements. However an inline element doesn’t start a new line, and it takes only the space it needs not all of it. For example; <span> element. Inline block, is a kind of mix of both, you can set the width and height of the element. And it doesn’t start a new line. 2. The DOCTYPE html in html, is written at the beginning of each html page, and it declares that the page is html for the browser3. A box model is a box that wraps around each element in html. It has in it, the content of the element, margins, borders, and padding. The difference between margin and padding is that the padding is inside the border, and the margin is outside the border. They are both a transparent part of the box model that adds space between things (content and border, and border and other element).4. For a website to be able to be opened on different screen sizes as well as smartphones, we need a responsive web design. The principles of the responsive web design are: * Make images and grids be flexible; when you do that it makes the website be more readable. It makes all the images and the grid change with the screen. * Start working with small screens; at the beginning start working if the screen is small.* Having hierarchy; it is very important because in small screens it makes the content and the website be more understandable.* Content-centric breakpoints; we need to focus on the content and make sure the layout looks good for all sizes of screens, and we do that we use breakpoints that will focus on the content that will be displayed.* No content should be hidden in smartphones. * Focus on accessibility.* And at the end test the responsiveness on different sizes of screen.5. There are many ways of length units in css; px, which is pixel, it is good for screens and it us 1/96 inch. cm, which is centimetres and it is 37.8 pixels. mm(millimetres) , which is 2.78 pixels. in (inches) which is 96 pixels. pt (points) which is 1.3333 pixels. pc (picas) which is 16 pixels. there are relative length as well, which is a length that is based on the size of the screen; em, em inherits the size of its parent element. Rem, which is root em, and is affected by the root of the document. %, percentage sign is a relative size based on the parent’s size. 6. A position property is the type of position used in an element. There are five different positions values: static; the default position, and they are not affected by anything, they are positioned based on the flow of the page. Relative; it is positioned relative to its normal position, and if we set a top right bottom or left properties then the element will be adjust away from its position. Fixed;  the element is positioned relatively to the viewpoint, so it will always stay in the same place on our screen when we scroll down or up. Absolute; the element is positioned relative to the nearest ancestor. And if it doesn’t have one, it will move along with the page scrolling. Sticky; the element is positioned based on the user’s scroll position. So it is relative until it is met with the view point and then it sticks there. There are also display values such as none, inline, inline-block, block and more. The display values are responsible for the behaviour of an element.7. Flexbox is a layout model that offers space between items within a container there are two axes of flexbox- the main axis (horizontal axis) and the cross axis(vertical axis). The main axis and the cross axes are defined by flex-directions. * Justify-content; this property is responsible for how items are being on the main axis. It defines the space between and around items.* Align-items; the property is responsible for how flex items are along the cross axis. Within a container.* Align-self; this property overrides the align-items, it is responsible for controlling the alignment of specific items. * Align-content; this property is responsible for aligning a flex container’s lines along the cross-axis* Flex-grow; this property is responsible for determining the flex’s growth relatively to other flex items in the same container* Flex-wrap; this property is responsible for controlling whether flex items need to be wrapped to the next line if they exceed the container’s width.flex-container{	Display: flex;	Justify-content: space-between;	Align-items: baseline;	Flex-wrap: wrap;}8. A class is for grouping a few html elements together. The elements that have the same class share common styles and behaviours. You can apply the same class for different elements or different classes to one element. However id is used to identify a single html element on a page, it is unique within the document. An id and class both have attributes that are applied on the elements.9. Span tag is an inline element, so it occurs in the middle of a line. Its purpose is to apply style on a small piece on the content within a text or block. However,  div is a block level element, it is responsible of applying style of the content in it.10. A semantic elements are elements that their name makes us and the browser understand clearly the meaning of it. So for example <table>, <article>m <form> elements’ meaning are clear to us by their name.so table creates a table, article creates an article, and form creates a form.11. ::before and ::after are elements that allows us to insert content before and after the content of an element. 12. Css and sccs are technologies for creating style for web pages. Css is simple and uses semicolons and curly braces. Scss stands for sassy css. It is easier to maintain and keep organized code. And it is is more powerful than css. It adds up to css. Css is a straightforward syntax and scss is a more human-friendly syntax. Css doesn’t really have variables and scss have variables that can hold values like colors, font sizes, and more. Css doesn’t support nesting of selectors and it makes the code less organized. And scss allows you to nest selectors within each other.  So it is more organized.